package test;
/**
 * 
 * @author 233admincol
 *HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。
 *今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。
 *但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？
 *例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。
 *给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)
 */
public class 连续子数组的最大和 {
	
	public  int FindGreatestSumOfSubArray(int[] array) {
        int res = array[0]; //记录当前所有子数组的和的最大值
        int max=array[0];   //包含array[i]的连续数组最大值
        for (int i = 1; i < array.length; i++) {
        	//不断比较，只记录最大的那个子数组和
        	//这里是连续数组和与当前值比较，因为有的时候一个数比加了这个数的连续数组和还大
        	//若max为负数，则只要出现一个比max大的数，子数组就要从这里开始计算
            max=Math.max(max+array[i], array[i]);
            //当前最大值与上一次的最大值比较
            res=Math.max(max, res);
        }
        return res;
}
}
